import{_ as e,X as o,Y as r,$ as s,a2 as p,a1 as a,B as i,a0 as t}from"./framework-370f8292.js";const l="/img/09-Databases/QQ截图20230406213538.png",d="/img/09-Databases/QQ截图20230406213555.png",c="/img/09-Databases/QQ截图20230406213609.png",u="/img/09-Databases/QQ截图20230406213621.png",h="/img/09-Databases/QQ截图20230406213645.png",g={},k=a('<p>了解系统设计中各种数据库类型及其用途。</p><p>如前所述，数据库分为关系型和非关系型两种类型。让我们详细讨论这些类型。</p><h2 id="关系型数据库" tabindex="-1"><a class="header-anchor" href="#关系型数据库" aria-hidden="true">#</a> 关系型数据库</h2><p><strong>关系型数据库</strong>在存储数据之前遵循特定的模式。存储在关系型数据库中的数据具有先前的结构。通常，该模型将数据组织成一个或多个关系（也称为表格），每个元组（实例）具有唯一的键。数据的每个实体都由实例和属性组成，其中实例存储在行中，每个实例的属性存储在列中。由于每个元组都有一个唯一的键，一个表中的元组可以通过在其他表中存储主键来链接到其他表中的元组，通常称为外键。</p><p>用于操作数据库的结构化查询语言（SQL）包括插入、删除和检索数据等操作。</p><p>关系型数据库之所以广受欢迎且占主导地位，原因包括管理通用数据时的简单性、健壮性、灵活性、性能、可扩展性和兼容性。</p><p>关系型数据库提供原子性、一致性、隔离性和持久性（ACID）属性，以维护数据库的完整性。ACID是一个强大的抽象概念，可以简化与数据的复杂交互，并将许多异常（如脏读、脏写、读取偏差、丢失更新、写入偏差和幻读）隐藏在简单的事务中。</p><p>但ACID的设计是像一把大锤，可以适用于所有问题。如果某个特定的应用程序只需要处理少量异常，就有机会使用定制解决方案以获得更高的性能，但增加了复杂性。</p><p>让我们详细讨论ACID：</p><ul><li><strong>原子性：</strong> 事务被视为一个原子单元。因此，一个事务中的所有语句都将成功执行或都不执行。如果事务中的一个语句失败，则应该中止并回滚。</li><li><strong>一致性：</strong> 在任何给定时间，数据库应处于一致状态，并且每个事务之后都应保持一致状态。例如，如果多个用户要从数据库中查看记录，则每次都应返回相似的结果。</li><li><strong>隔离性：</strong> 在多个事务同时运行的情况下，它们不应相互影响。数据库的最终状态应与按顺序执行的事务相同。</li><li><strong>持久性：</strong> 系统应确保已完成的事务将永久保存在数据库中，即使在系统故障事件中也是如此。</li></ul><p>用于定义关系型数据库模式以及其他操作（例如存储、检索和运行SQL查询）的各种数据库管理系统（DBMS）被使用。以下是一些流行的DBMS：</p><ul><li>MySQL</li><li>Oracle Database</li><li>Microsoft SQL Server</li><li>IBM DB2</li><li>Postgres</li><li>SQLite</li></ul><h3 id="为什么选择关系型数据库" tabindex="-1"><a class="header-anchor" href="#为什么选择关系型数据库" aria-hidden="true">#</a> 为什么选择关系型数据库？</h3><p>对于结构化数据存储，关系型数据库是软件专业人员的默认选择。这些数据库具有许多优点。</p><p>其中最大的优势之一是关系型数据库对ACID事务和相关编程语义的抽象，这使得使用关系型数据库非常方便。</p><p>让我们重新审视一下关系型数据库的一些重要特点：</p><h4 id="灵活性" tabindex="-1"><a class="header-anchor" href="#灵活性" aria-hidden="true">#</a> 灵活性</h4><p>在SQL的上下文中，**数据定义语言(DDL)**提供了修改数据库的灵活性，包括表、列、重命名表以及其他更改。</p><p>即使其他查询正在执行且数据库服务器正在运行，DDL甚至也允许我们修改架构。</p><h4 id="减少冗余" tabindex="-1"><a class="header-anchor" href="#减少冗余" aria-hidden="true">#</a> 减少冗余</h4><p>关系型数据库的最大优势之一是它可以消除数据冗余。</p><p>与特定实体相关的信息出现在一个表中，而与该特定实体相关的数据出现在通过外键链接的其他表中。</p><p>这个过程称为规范化，具有消除不一致依赖的额外好处。</p><h4 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h4><p>并发是设计企业数据库时的一个重要因素。在这种情况下，数据同时被许多用户读取和写入。</p><p>我们需要协调这些交互，以避免数据的不一致性，例如酒店房间的重复预订。</p><p>关系型数据库中的并发通过对数据的事务访问来处理。</p><p>如前所述，事务被视为原子操作，因此在成功执行时也可以处理错误处理以回滚或提交事务。</p><h4 id="集成" tabindex="-1"><a class="header-anchor" href="#集成" aria-hidden="true">#</a> 集成</h4><p>从多个来源聚合数据的过程是企业应用程序中的常见做法。</p><p>执行此聚合的常见方法是集成共享数据库，其中多个应用程序存储其数据。</p><p>这样，所有应用程序都可以轻松访问彼此的数据，而并发控制措施则处理多个应用程序的访问。</p><h4 id="备份和灾难恢复" tabindex="-1"><a class="header-anchor" href="#备份和灾难恢复" aria-hidden="true">#</a> 备份和灾难恢复</h4><p>关系型数据库保证数据的状态在任何时间都是一致的。</p><p>导出和导入操作使备份和恢复变得更加容易。</p><p>大多数基于云的关系型数据库执行持续镜像以避免数据丢失，并使恢复过程更加轻松和快捷。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><h4 id="阻抗不匹配" tabindex="-1"><a class="header-anchor" href="#阻抗不匹配" aria-hidden="true">#</a> 阻抗不匹配</h4><p><strong>阻抗不匹配</strong>是关系模型和内存数据结构之间的差异。</p><p>关系模型将数据组织成关系和元组的表格结构。</p><p>在这个结构化数据上执行SQL操作产生与关系代数对齐的关系。</p><p>然而，它也有一些限制。</p><p>特别是，表格中的值只能是简单值，不能是结构或列表。而内存中的情况是不同的，可以存储复杂的数据结构。</p><p>为了使复杂结构与关系兼容，我们需要根据关系代数对数据进行翻译。因此，阻抗不匹配需要在两种表示之间进行翻译，如下图所示：</p><p><img src="'+l+'" alt="QQ截图20230406213538" loading="lazy"></p><p>视图中的单个聚合值由关系数据库中的多个行和表组成。</p><h2 id="为什么选择非关系型-nosql-数据库" tabindex="-1"><a class="header-anchor" href="#为什么选择非关系型-nosql-数据库" aria-hidden="true">#</a> 为什么选择非关系型（NoSQL）数据库？</h2><p>NoSQL数据库旨在支持各种数据模型来访问和管理数据。</p><p>有各种类型的NoSQL数据库，我们将在下一节中解释这些类型。</p><p>这些数据库用于需要大量半结构化和非结构化数据、低延迟和灵活数据模型的应用程序。</p><p>这可以通过放宽其他数据库的一些数据一致性限制来实现。以下是NoSQL数据库的一些特征：</p><ul><li><p><strong>简单的设计：</strong> 与关系型数据库不同，NoSQL不需要处理阻抗不匹配——例如，在一个文档中存储所有员工的数据，而不是多个需要连接操作的表格。这种策略使它的编写、调试和维护变得简单和容易。</p></li><li><p><strong>水平扩展：</strong> 主要是由于NoSQL能够在大型集群上运行数据库，因此NoSQL更受欢迎。这解决了当并发用户数量增加时的问题。由于特定员工相关的数据存储在一个文档中而不是多个表格上的节点上，因此NoSQL更容易进行水平扩展。NoSQL数据库经常将数据分布在多个节点上，并自动平衡数据和查询。如果节点故障，则可以在不影响应用程序的情况下进行透明替换。</p></li><li><p><strong>可用性：</strong> 为了增强数据的可用性，可以在不停机的情况下执行节点替换。大多数非关系型数据库的变体都支持数据复制，以确保高可用性和灾难恢复。</p></li><li><p><strong>支持非结构化和半结构化数据：</strong> 许多NoSQL数据库处理在数据库配置或数据写入时没有架构的数据。例如，文档数据库是没有结构的，它们允许文档（JSON、XML、BSON等）具有不同的字段。例如，一个JSON文档可能比另一个JSON文档少一些字段。</p></li><li><p><strong>成本：</strong> 许多关系型数据库管理系统的许可证费用相当昂贵，而许多NoSQL数据库是开源且免费提供的。同样，一些关系型数据库管理系统依赖于昂贵的专有硬件和存储系统，而NoSQL数据库通常使用廉价的商用服务器群集。</p></li></ul><p>NoSQL数据库根据操作和特性的性质被分为各种类别，包括文档存储、列数据库、键值存储和图形数据库。</p><p>我们将在以下各节中讨论它们以及从系统设计的角度来看它们的用途。</p><h3 id="nosql数据库类型" tabindex="-1"><a class="header-anchor" href="#nosql数据库类型" aria-hidden="true">#</a> NoSQL数据库类型</h3><p>下面描述了各种类型的NoSQL数据库：</p><p><img src="'+d+'" alt="QQ截图20230406213555" loading="lazy"></p><p>NoSQL数据库的类型</p><h4 id="键值数据库" tabindex="-1"><a class="header-anchor" href="#键值数据库" aria-hidden="true">#</a> 键值数据库</h4><p><strong>键值数据库</strong>使用键值方法（如哈希表）以键值对的形式存储数据。下面的段落中可以看到这一点的图示。在这里，键作为唯一或主键，而值可以是从简单标量值到复杂对象的任何值。这些数据库允许数据的易分区和水平扩展。一些流行的键值数据库包括Amazon DynamoDB，Redis和Memcached DB。</p><p><strong>使用案例</strong>：键值数据库对于面向会话的应用程序非常高效。面向会话的应用程序（如Web应用程序）在会话期间将用户数据存储在主内存或数据库中。这些数据可能包括用户资料信息、推荐、定向促销、折扣等等。为了便于访问和存储，为每个用户的会话分配一个唯一的ID（一个键）。因此，更好的选择是使用键值数据库来存储此类数据。</p><p>下图显示了键值数据库的示例。商品的“产品ID”和“类型”被共同视为主键。这被视为该键值数据库的键。此外，存储项目属性的模式是基于项目的性质和它所拥有的属性数量来定义的。</p><p><img src="'+c+`" alt="QQ截图20230406213609" loading="lazy"></p><p>在DynamoDB中以键值对的形式存储的数据，其中键是两个属性（产品ID和类型）的组合</p><h4 id="文档数据库" tabindex="-1"><a class="header-anchor" href="#文档数据库" aria-hidden="true">#</a> 文档数据库</h4><p><strong>文档数据库</strong>设计用于以XML、JSON、BSON等格式存储和检索文档。这些文档由可以包括映射、集合和标量值的分层树数据结构组成。</p><p>此类型数据库中的文档可能具有不同的结构和数据。</p><p>MongoDB和Google Cloud Firestore是文档数据库的示例。</p><p><strong>使用案例</strong>：</p><p>文档数据库适用于非结构化的目录数据，例如JSON文件或其他复杂结构的分层数据。</p><p>例如，在电子商务应用程序中，一个产品有数千个属性，在关系数据库中存储这些属性会影响读取性能，因此文档数据库的角色就来了，它可以高效地将每个属性存储在单个文件中，以便进行易于管理和更快的读取速度。</p><p>此外，它还是内容管理应用程序（例如博客和视频平台）的良好选择。</p><p>在这样的应用程序中，用于应用程序的实体存储为单个文档。</p><p>以下示例显示存储在JSON文档中的数据。此数据是关于一个人的。文件中存储了各种属性，包括<code>id</code>、<code>name</code>、<code>email</code>等等。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>
   <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Brown&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mr.&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;brown@anyEmail.com&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;cell&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123-465-9999&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;likes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;designing&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;cycling&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;skiing&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token property">&quot;businesses&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ABC co.&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;partner&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Vike&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bankrupt&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;date_founded&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;$date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2021-12-10&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个包含商人数据的JSON文件。</p><h4 id="图形数据库" tabindex="-1"><a class="header-anchor" href="#图形数据库" aria-hidden="true">#</a> 图形数据库</h4><p><strong>图形数据库</strong>使用图形数据结构来存储数据，其中节点表示实体，边显示实体之间的关系。</p><p>基于关系组织节点会产生节点之间的有趣模式。</p><p>该数据库允许我们将数据存储一次，然后根据关系不同地解释它。</p><p>流行的图形数据库包括Neo4J、OrientDB和InfiniteGraph。</p><p>图形数据保存在存储文件中以进行持久化存储。每个文件都包含图的特定部分的数据，如节点、链接、属性等等。</p><p>在下图中，使用图形数据结构存储了一些数据，其中节点通过表示节点之间的关系的边连接在一起。</p><p>每个节点都有一些属性，如<code>Name</code>、<code>ID</code>和<code>Age</code>。</p><p>具有<code>ID: 2</code>的节点具有名称为<code>James</code>和<code>29</code>岁的年龄。</p><p><img src="`+u+'" alt="QQ截图20230406213621" loading="lazy"></p>',86),m=a('<p><strong>使用案例</strong>：图形数据库可以用于社交应用程序，并在不同类型的用户及其活动之间提供有趣的事实和数据。图形数据库的重点是存储数据并为基于实体之间的关系驱动分析和决策铺平道路。图形数据库的性质使它们适用于各种应用，例如数据规范和隐私、机器学习研究、基于金融服务的应用程序等等。</p><h4 id="列式数据库" tabindex="-1"><a class="header-anchor" href="#列式数据库" aria-hidden="true">#</a> 列式数据库</h4><p><strong>列式数据库</strong>将数据存储在列中而不是行中。它们可以快速高效地访问数据库列中的所有条目。流行的列式数据库包括Cassandra、HBase、Hypertable 和 Amazon SimpleDB。</p><p><strong>使用案例</strong>：列式数据库对于大量聚合和数据分析查询非常高效。它大大减少了磁盘I/O需求和需要从磁盘加载的数据量。例如，在与金融机构相关的应用程序中，需要在一段时间内汇总财务交易。列式数据库通过仅读取金额列，忽略客户的其他属性，使此操作更快。</p><p>以下图显示了列式数据库的示例，其中数据以列式格式存储。这与关系数据库不同，后者以行为导向存储数据：</p><p><img src="'+h+'" alt="QQ截图20230406213645" loading="lazy"></p>',6),b=a('<h3 id="nosql数据库的缺点" tabindex="-1"><a class="header-anchor" href="#nosql数据库的缺点" aria-hidden="true">#</a> NoSQL数据库的缺点</h3><h4 id="缺乏标准化" tabindex="-1"><a class="header-anchor" href="#缺乏标准化" aria-hidden="true">#</a> 缺乏标准化</h4><p>NoSQL没有遵循任何特定的标准，例如关系数据库遵循关系代数。从一种类型的NoSQL数据库迁移应用程序可能是一个挑战。</p><h4 id="一致性" tabindex="-1"><a class="header-anchor" href="#一致性" aria-hidden="true">#</a> 一致性</h4><p>当故障发生时，NoSQL数据库基于特定的一致性和可用性权衡提供不同的产品。</p><p>我们不会拥有强大的数据完整性，例如关系数据库中的主键和外键完整性。</p><p>数据可能不是强一致性的，而是使用弱模型（如最终一致性）缓慢收敛。</p><h2 id="选择正确的数据库" tabindex="-1"><a class="header-anchor" href="#选择正确的数据库" aria-hidden="true">#</a> 选择正确的数据库</h2><p>选择应用程序中要使用的数据库受到各种因素的影响。</p><p>下表比较了关系数据库和非关系数据库，以帮助我们进行选择：</p><h2 id="关系型和非关系型数据库" tabindex="-1"><a class="header-anchor" href="#关系型和非关系型数据库" aria-hidden="true">#</a> 关系型和非关系型数据库</h2><table><thead><tr><th><strong>关系型数据库</strong></th><th><strong>非关系型数据库</strong></th></tr></thead><tbody><tr><td>如果要存储的数据是结构化的</td><td>如果要存储的数据是非结构化的</td></tr><tr><td>如果需要ACID属性</td><td>如果需要序列化和反序列化数据</td></tr><tr><td>如果数据大小相对较小，可以放在一个节点上</td><td>如果要存储的数据大小较大</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>注意</strong>：当NoSQL数据库首次出现时，它们与传统数据库相比在编程和使用方面有很大不同。</p><p>尽管在过去的多年中，学术界和工业界进行了广泛的研究，使得NoSQL和传统存储之间的面向程序员的差异变得模糊。</p><p>我们可以使用相同的SQL语句来访问NoSQL存储并获得与传统存储相似的性能和一致性。</p><p>Google的Cloud Spanner就是这样一种具有地理复制和自动水平分片能力以及高速全局数据快照的数据库。</p></div><h2 id="测验" tabindex="-1"><a class="header-anchor" href="#测验" aria-hidden="true">#</a> 测验</h2><p>通过测验测试您对不同类型数据库的了解。</p><ul><li>当我们有非结构化数据且需要高性能时，应该使用哪种数据库？</li><li>什么情况下应避免选择关系数据库作为应用程序的数据库？</li><li>如果制作一个需要以表格格式存储数据的零售店应用程序，应该使用哪种数据库？</li><li>制作类似Facebook的应用程序应该使用哪种数据库？</li><li>我们应该为哪些应用程序使用文档导向数据库？</li><li>我们应该为哪些场景使用键值数据库？</li></ul>',16);function q(Q,S){const n=i("center");return o(),r("div",null,[k,s(n,null,{default:p(()=>[t("图由节点和链接组成。此图捕获实体及其之间的关系")]),_:1}),m,s(n,null,{default:p(()=>[t("列式和行式数据库")]),_:1}),b])}const N=e(g,[["render",q],["__file","02DatabasesTypes.html.vue"]]);export{N as default};
