import { _ as _export_sfc, Y as openBlock, Z as createElementBlock, a2 as createStaticVNode } from "./framework-03ffdf83.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p><strong>本节目标:</strong> 学会如何在系统设计面试中表现出色的技巧。</p><h2 id="面试时要做什么" tabindex="-1"><a class="header-anchor" href="#面试时要做什么" aria-hidden="true">#</a> 面试时要做什么</h2><p>我们强调，候选人应该努力避免看起来毫无创意。面试官可能<strong>已经向许多候选人</strong>问过同样的问题。复制一个普通的设计可能不会给面试官留下深刻印象。</p><p>同时，面试可能是一个压力很大的场景。制定合理的解决问题的计划会是一个很好的策略。对于不同的候选人，可以有不同的策略来解决设计问题。我们建议采用以下策略。</p><h3 id="制定战略-然后分而治之" tabindex="-1"><a class="header-anchor" href="#制定战略-然后分而治之" aria-hidden="true">#</a> 制定战略，然后分而治之</h3><p>面试过程中可以引导面试官, 按照如下方式进行:</p><p><img src="https://cdn.jsdelivr.net/gh/gaoxiang15125/BlogImage@master/1676013160115.png" alt="" loading="lazy"></p><h4 id="提炼问题" tabindex="-1"><a class="header-anchor" href="#提炼问题" aria-hidden="true">#</a> 提炼问题</h4><p>我们需要了解设计问题及其要求。我们可以戴上产品经理的帽子，通过询问面试官细化的问题来确定相关功能的优先级。</p><p>我们的想法是与面试官一起去旅行，同时明白我们要怎么设计/为什么要这样设计。这些访谈旨在衡量我们是否能够从逻辑上从模糊的需求中推导出一个系统。</p><p>确保我们正在解决正确的问题。通常需要按照如下标准将需求分为两组：</p><ul><li>客户直接需求——例如: 能够近乎实时地向朋友发送消息。</li><li>间接需求——例如: 消息服务性能不应随着用户负载的增加而降低。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>注意：</strong> 专业人士称这些为功能性和非功能性需求。</p></div><h4 id="处理数据" tabindex="-1"><a class="header-anchor" href="#处理数据" aria-hidden="true">#</a> 处理数据</h4><p>我们需要识别和理解数据及其特征，以便为系统设计合适的数据存储系统和数据处理组件。</p><p>在寻找合适的系统和组件时可以参照下面的标准：</p><ul><li>现在数据的大小是多少？</li><li>随着时间的推移，数据预计会以什么速度增长？</li><li>其他子系统或最终用户将如何使用这些数据？</li><li>数据是重读还是重写？</li><li>我们需要数据的严格一致性，还是最终一致性？</li><li>数据的持久性目标是什么？</li><li>存储或传输用户数据时有哪些隐私和监管要求？</li></ul><h4 id="讨论组件" tabindex="-1"><a class="header-anchor" href="#讨论组件" aria-hidden="true">#</a> 讨论组件</h4><p>在某种程度上，我们的工作可以被视为:</p><ul><li>明确将使用哪些组件</li><li>将它们放置在何处</li><li>组件之间如何相互交互。</li></ul><p>eg: 数据库的类型——使用传统数据库还是 NoSQL 数据库？</p><p>可能在某些情况下，我们有强烈的论据要使用 NoSQL 数据库，但我们的面试官可能会坚持我们使用传统数据库。遇到这种情况怎么办？</p><p>可以考虑从理论上设计一个新组件, 既满足业务需求, 也满足面试官的想法, 这种交互是展示我们设计技能的绝佳机会。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>注意：</strong> 我们经常将组件的细节抽象为框，并使用箭头来显示它们之间的交互。它有助于在较高级别定义面向用户的 API，以进一步了解系统数据和交互需求。</p></div><h4 id="讨论权衡" tabindex="-1"><a class="header-anchor" href="#讨论权衡" aria-hidden="true">#</a> 讨论权衡</h4><p>请记住，<strong>设计问题没有唯一的正确答案(没有银弹)</strong>。如果我们把同样的问题交给两个不同的小组，他们可能会想出不同的设计。</p><p>这是因为设计解决方案中存在多样性：</p><ul><li>不同的组成有不同的优缺点。我们需要仔细权衡什么对我们有用。</li><li>不同的选择在金钱和技术复杂性方面有不同的成本。我们需要有效地利用我们的资源。</li><li>每个设计都有其弱点。作为设计师，我们应该意识到所有这些问题，并且我们有一个后续计划来解决它们。</li></ul><p>我们应该向面试官指出我们设计中的弱点，并解释为什么我们还没有解决这些问题。</p><p>eg: 当前的设计无法处理十倍的负载，但可以预期到系统不会很快达到那个水平。</p><p>解决方案: 添加一个监控系统，密切关注负载随时间的增长情况，以便及时实施新设计。</p><p>这是一个例子，我们有意的选择牺牲性能的方式, 降低了系统成本。</p><p><strong>在一个大系统中，总会有一些事情失败。</strong> 我们需要将容错和安全性集成到我们的设计中。</p><h2 id="面试中不能做什么" tabindex="-1"><a class="header-anchor" href="#面试中不能做什么" aria-hidden="true">#</a> 面试中不能做什么</h2><p>以下是我们在系统设计面试中应该避免做的几件事：</p><ul><li>不要在系统设计面试中编写代码。</li><li>不要在没有计划的情况下开始设计。</li><li>不要默默工作。</li><li>不要无缘无故地描述数字。我们必须框起来。</li><li>如果我们不知道某事，不要掩饰，也不要假装知道。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>注意：</strong> 如果面试官要求我们设计一个我们从未听说过的系统，我们应该诚实地告诉他们。面试官要么向我们解释，要么他们可能会改变问题。</p></div>', 37);
const _hoisted_38 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_38);
}
const _03PerformWell_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "03PerformWell.html.vue"]]);
export {
  _03PerformWell_html as default
};
