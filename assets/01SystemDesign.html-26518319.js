import{_ as s,X as a,Y as o,$ as r,a2 as i,Z as e,a0 as t,a1 as l,B as c}from"./framework-370f8292.js";const d="/ModernSystemDesignInterview/img/18-Pub-sub/thePubSubSystem.png",_={},h=e("p",null,"了解设计发布-订阅系统的基础知识。",-1),u=e("h2",{id:"什么是发布-订阅系统",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是发布-订阅系统","aria-hidden":"true"},"#"),t(" 什么是发布-订阅系统？")],-1),m=e("p",null,[e("strong",null,"发布-订阅消息通信"),t("，通常称为"),e("strong",null,"Pub-sub消息通信"),t("，是一种常见的在无服务器和微服务架构中使用的异步服务通信方法。使用发布-订阅系统，消息可以异步发送到一个系统的不同子系统中。订阅发布-订阅模式的所有服务都将接收推入系统的消息。")],-1),p=e("p",null,"例如，当著名运动员Cristiano Ronaldo在Instagram上发布或发推文时，他的所有追随者都会得到通知。在这里，Cristiano Ronaldo是发布者，他的帖子或推文是消息，所有追随者是订阅者。",-1),g=e("p",null,[e("img",{src:d,alt:"thePubSubSystem",loading:"lazy"})],-1),b=l('<h2 id="动机" tabindex="-1"><a class="header-anchor" href="#动机" aria-hidden="true">#</a> 动机</h2><p>分布式系统的硬件基础设施由数百万台机器组成。使用发布-订阅系统进行异步通信可以增加可扩展性。生产者和消费者是相互独立的，因此可以分别扩展和开发它们。组件之间的解耦，生产者和消费者，允许更大的可扩展性，因为添加或删除任何组件不会影响其他组件。</p><h2 id="如何设计发布-订阅系统" tabindex="-1"><a class="header-anchor" href="#如何设计发布-订阅系统" aria-hidden="true">#</a> 如何设计发布-订阅系统？</h2><p>我们将发布-订阅系统设计分为以下课程：</p><ol><li><strong>介绍</strong>：在这节课中，我们将学习使用发布-订阅系统的用例，定义其要求并为其设计API。</li><li><strong>设计</strong>：在这节课中，我们将讨论有消息队列和代理的两种发布-订阅系统设计。</li></ol>',5);function f(x,S){const n=c("center");return a(),o("div",null,[h,u,m,p,g,r(n,null,{default:i(()=>[t("发布-订阅系统")]),_:1}),b])}const P=s(_,[["render",f],["__file","01SystemDesign.html.vue"]]);export{P as default};
